0:
  questions:
    - question: |*
        Write function <strong>countdown</strong> that takes a number, and returns an array starting with the input, and counting down to zero. 
      type: code
      tests:
        - "countdown(6) == [6, 5, 4, 3, 2, 1, 0]"
        - "countdown(3) == [3, 2, 1, 0]"
        - "countdown(5) == [5, 4, 3, 2, 1, 0]"
      answer: |*
        <code lang='js'>
        function countdown(num) {
          let result = [];
          for (let i = num; i >= 0; i--) {
            result.push(i);
          }
          return result;
        }
        </code>
    - question: |*
        Write function <strong>squares</strong> that takes a number, and returns an array with all the squares up to the input squared. 
      type: code
      tests:
        - "squares(3) == [1, 4, 9]"
        - "squares(5) == [1, 4, 9, 16, 25]"
        - "squares(2) == [1, 4]"
      answer: |*
        <code lang='js'>
        function squares(max) {
          let result = [];
          for (let i = 0; i <= max; i++) {
            result.push(i * i);
          }
          return result;
        }
        </code>
    - question: |*
        Write function <strong>product</strong> that takes an array, and returns the product of all the numbers in the array. 
      type: code
      tests:
        - "product([1, 3, 4]) == 12"
        - "product([5, 6, 2, 2]) == 120"
        - "product([2, 5]) == 10"
      answer: |*
        <code lang='js'>
        function product(array) {
          let result = 1;
          for (let num of array) {
            result *= num;
          }
          return result;
        }
        </code>
    - question: |*
        Write function <strong>increase</strong> that takes an array, and returns an array with all the elements increased by one. 
      type: code
      tests:
        - "increase([1, 3, 4]) == [2, 4, 5]"
        - "increase([5, 6, 2, 2]) == [6, 7, 3, 3]"
        - "increase([2, 5]) == [3, 6]"
      answer: |*
        <code lang='js'>
        function increase(array) {
          let result = [];
          for (let num of array) {
            result.push(num + 1);
          }
          return result;
        }
        </code>
    - question: |*
        Write function <strong>absolute</strong> that takes an array, and returns an array with all the negative numbers from the input turned positive. 
      type: code
      tests:
        - "absolute([1, 4, -2]) == [1, 4, 2]"
        - "absolute([-1, 0, 1, -3]) == [1, 0, 1, 3]"
        - "absolute([-10, -20]) == [10, 20]"
      answer: |*
        <code lang='js'>
        function increase(array) {
          let result = [];
          for (let num of array) {
            if (num < 0) {
              num = -num;
            }
            result.push(num);
          }
          return result;
        }
        </code>
    - question: |*
        Write function <strong>zeroCount</strong> that takes an array, and returns the number of times zero appears in the array. 
      type: code
      tests:
        - "zeroCount([1, 0, -2]) == 1"
        - "zeroCount([0, 0, 3, 0, 4]) == 3"
        - "zeroCount([5, 6, 7]) == 0"
      answer: |*
        <code lang='js'>
        function zeroCount(array) {
          let count = 0;
          for (let num of array) {
            if (num == 0) {
              count++;
            }
          }
          return count;
        }
        </code>
    - question: |*
        Write function <strong>range</strong> that takes an array, and returns the difference between the largest and smallest elements in the array. 
      type: code
      tests:
        - "range([1, 0, 3, 4]) == 4"
        - "range([1, 0, -2]) == 3"
        - "range([5, 6, 7]) == 2"
      answer: |*
        <code lang='js'>
        function range(array) {
          let max = array[0];
          let min = array[0];
          for (let num of array) {
            if (max < num) {
              max = num;
            }
            if (min > num) {
              min = num;
            }
          }
          return max - min;
        }
        </code>
    - question: |*
        Write function <strong>countAWords</strong> that takes an array, and returns the number of words that start with the letter 'a'. 
      type: code
      tests:
        - "countAWords(['apple', 'ant', 'banana']) == 2"
        - "countAWords(['crayon', 'cat', 'at', 'tall']) == 1"
        - "countAWords(['barn', 'soft']) == 0"
      answer: |*
        <code lang='js'>
        function range(words) {
          let count = 0;
          for (let word of words) {
            if (word[0] == 'a') {
              count++;
            }
          }
          return count;
        }
        </code>
    - question: |*
        Write function <strong>evenSubset</strong> that takes an array, and returns an array without all the odd numbers from the input. 
      type: code
      tests:
        - "evenSubset([2, 3, 4, 6]) == [2, 4, 6]"
        - "evenSubset([1, 9, 10, 11]) == [10]"
        - "evenSubset([8, 5, 8]) == [8, 8]"
      answer: |*
        <code lang='js'>
        function range(array) {
          let result = [];
          for (let num of array) {
            if (num % 2 == 0) {
              result.push(num);
            }
          }
          return result;
        }
        </code>
    - question: |*
        Write function <strong>shift</strong> that takes an array, and returns an array with all the elements moved forward one index - the last element will become the first element. 
      type: code
      tests:
        - "shift([1, 3, 4]) == [4, 1, 3]"
        - "shift([5, 6, 2, 1]) == [1, 5, 6, 2]"
        - "shift([2, 5]) == [5, 2]"
      answer: |*
        <code lang='js'>
        function shift(array) {
          let result = [];
          let last = array[array.length - 1];
          result.push(last);
          for (let i = 0; i < array.length - 1; i++) {
            result.push(i);
          }
          return result;
        }
        </code>
    - question: |*
        Write function <strong>differences</strong> that takes an array, and returns an array of the differences between consecutive elements in the input. 
      type: code
      tests:
        - "differences([2, 3, 4, 6]) == [1, 1, 2]"
        - "differences([1, 9, 11, 10]) == [8, 2, -1]"
        - "differences([8, 5, 8]) == [-3, 3]"
      answer: |*
        <code lang='js'>
        function differences(array) {
          let result = [];
          for (let i = 1; i < array.length; i++) {
            result.push(array[i] - array[i - 1]);
          }
          return result;
        }
        </code>
    - question: |*
        Write function <strong>zip</strong> that takes two arrays, and merges the inputs into a single array by alternatively selecting elements from the inputs. 
      type: code
      tests:
        - "zip([1, 2, 3], [5, 6, 7]) == [1, 5, 2, 6, 3, 7]"
        - "zip([1, 10, 100], [2, 4, 6]) == [1, 2, 10, 4, 100, 6]"
        - "zip(['a', 'b'], ['x', 'y']) == ['a', 'x', 'b', 'y']"
      answer: |*
        <code lang='js'>
        function zip(array1, array2) {
          let result = [];
          for (let i = 0; i < array1.length; i++) {
            result.push(array1[i]);
            result.push(array2[i]);
          }
          return result;
        }
        </code>
    - question: |*
        A vowel costs $2, a consonant costs $1, and the letter 'y' is worth $3.
        Write function <strong>wordCost</strong> that returns the value of the input word. 
      type: code
      tests:
        - "wordCost('apple') == 7"
        - "wordCost('qwerty') == 9"
        - "wordCost('hazy') == 7"
      answer: |*
        <code lang='js'>
        function wordCost(word) {
          let vowels = 'aeiou';
          let cost = 0;
          for (let letter of word) {
            if (vowels.include(letter)) {
              cost += 2;
            } else if (letter == 'y') {
              cost += 3;
            } else {
              cost++;
            }
          }
          return cost;
        }
        </code>
    - question: |*
        Write function <strong>dips</strong> that takes in an array, and counts the number of times an element in the array is smaller than the one in the previous index. 
      type: code
      tests:
        - "dips([1, 2, 3, 2, 5]) == 1"
        - "dips([5, 2, 5, 2, 5, 2]) == 3"
        - "dips([5, 4, 3, 10, 9]) == 3"
      answer: |*
        <code lang='js'>
        function dips(array) {
          let dip_count = 0;
          for (let i = 1; i < array1.length; i++) {
            if (array[i] < array[i - 1]) {
              dip_count++;
            }
          }
          return dip_count;
        }
        </code>
    - question: |*
        Write function <strong>pyramid</strong> that takes in a number, and creates an array that counts up to that number starting from zero, then counts back down to zero. 
      type: code
      tests:
        - "pyramid(3) == [0, 1, 2, 3, 2, 1, 0]"
        - "pyramid(5) == [0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0]"
        - "pyramid(2) == [0, 1, 2, 1, 0]"
      answer: |*
        <code lang='js'>
        function pyramid(peak) {
          let result = [];
          for (let i = 0; i <= peak; i++) {
            result.push(i);
          }
          for (let i = peak - 1; i >= 0; i--) {
            result.push(i);
          }
          return result;
        }
        </code>
    - question: |*
        Shirts cost $5, pants cost $6, and hats cost $2. 
        Write function <strong>getPrice</strong> that takes in an array of items, and returns their total price. 
      type: code
      tests:
        - "getPrice(['shirt', 'hat', 'hat']) == 9"
        - "getPrice(['hat', 'pants', 'hat', 'shirt']) == 15"
        - "getPrice(['shirt', 'shirt']) == 10"
      answer: |*
        <code lang='js'>
        function getItemPrice(item) {
          if (item == 'shirt') {
            return 5;
          } else if (item == 'pants') {
            return 6;
          } else if (item == 'hat') {
            return 2;
          }
        }
        function getPrice(items) {
          let total_cost = 0;
          for (let item of items) {
            total_cost += getItemPrice(item);
          }
          return total_cost;
        }
        </code>
    - question: |*
        Write function <strong>clip</strong> that takes in an array and two number inputs. 
        It returns the input array, with any element smaller than the first input number increased to the first input.
        Any element larger than the second number input is set to the second input. 
      type: code
      tests:
        - "clip([1, 3, 5, 4, 7, 2], 3, 6) == [3, 3, 5, 4, 6, 3]"
        - "clip([4, 1, 7, 1, 5], 2, 5) == [4, 2, 5, 2, 5]"
        - "clip([1, 3, 5, 7, 9, 0], 5, 6) == [5, 5, 5, 6, 6, 5]"
      answer: |*
        <code lang='js'>
        function clip(array, lower_bound, upper_bound) {
          let result = [];
          for (let num of array) {
            if (num < lower_bound) {
              result.push(lower_bound);
            } else if (num > upper_bound) {
              result.push(upper_bound);
            } else {
              result.push(num);
            }
            return result;
          }
        }
        </code>
    - question: |*
        A one-way flight between Atlanta and Boston costs $400 in either direction. <br>
        A one-way flight between Boston and Chicago costs $300 in either direction. <br>
        A one-way flight between Atlanta and Chicago costs $500 in either direction. <br>
        Write function <strong>tripCost</strong> that takes in an array that represents the order of cities visited. Return the total cost of the trip. 
      type: code
      tests:
        - "tripCost(['Atlanta', 'Boston', 'Atlanta', 'Chicago']) == 1300"
        - "tripCost(['Atlanta', 'Boston', 'Chicago']) == 700"
        - "tripCost(['Chicago', 'Boston', 'Atlanta', 'Chicago']) == 1200"
      answer: |*
        <code lang='js'>
        function oneWayCost(city1, city2) {
          if ((city1 == 'Atlanta' && city2 == 'Boston')) || (city1 == 'Boston' && city2 == 'Atlanta')) {
            return 400;
          } else if ((city1 == 'Boston' && city2 == 'Chicago')) || (city1 == 'Chicago' && city2 == 'Boston')) {
            return 300;
          } else if ((city1 == 'Atlanta' && city2 == 'Chicago')) || (city1 == 'Chicago' && city2 == 'Atlanta')) {
            return 500;
          }
        }
        function tripCost(cities) {
          total_cost = 0;
          for (let i = 0; i < cities.length - 1; i++) {
            total_cost += oneWayCost(cities[i], cities[i + 1])
          }
          return total_cost;
        }
        </code>
    - question: |*
        Write function <strong>isPalindrome</strong> that takes in a string, and returns true if the string is a palindrome (read same forward and backward), false otherwise. 
      type: code
      tests:
        - "isPalindrome('noon') == true"
        - "isPalindrome('racecar') == true"
        - "isPalindrome('blob') == false"
      answer: |*
        <code lang='js'>
        function isPalindrome(word) {
          for (let i = 0; i < word.length / 2; i++) {
            if (word[i] != word[word.length - 1 - i]) {
              return false;
            }
          }
          return true;
        }
        </code>
    - question: |*
        Write function <strong>isPrime</strong> that takes in a number, and returns true if the input is prime (only divisible by itself and one), false otherwise. 
      type: code
      tests:
        - "isPrime(5) == true"
        - "isPrime(20) == false"
        - "isPrime(9) == false"
      answer: |*
        <code lang='js'>
        function isPrime(num) {
          for (let i = 2; i < num; i++) {
            if (num % i == 0) {
              return false;
            }
          }
          return true;
        }
        </code>
    - question: |*
        Write function <strong>daysLeft</strong> that takes in the current month and day, and counts the number of days left in the year.
        Assume there is no leap year. 
      type: code
      tests:
        - "daysLeft(1, 20) == 345"
        - "daysLeft(4, 15) == 260"
        - "daysLeft(12, 26) == 5"
      answer: |*
        <code lang='js'>
        function daysLeft(current_month, current_day) {
          current_month -= 1; // To make month range from 0 - 11
          let days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          let days_left_in_current_month = days_per_month[current_month] - current_day;
          let days_left_in_future_months = 0;
          for (let month = current_month + 1; month < 12; month++) {
            days_left_in_future_months += days_per_month[month];
          }
          return days_left_in_current_month + days_left_in_future_months;
        }
        </code>
    - question: |*
        Write function <strong>getFactors</strong> that takes in a number, and returns an array of all the getFactors of that number. 
      type: code
      tests:
        - "getFactors(6) == [1, 2, 3, 6]"
        - "getFactors(20) == [1, 2, 4, 5, 10, 20]"
        - "getFactors(7) == [1, 7]"
      answer: |*
        <code lang='js'>
        function getFactors(num) {
          factors = [];
          for (let i = 1; i <= num; i++) {
            if (num % i == 0) {
              factors.push(i);
            }
          }
          return factors;
        }
        </code>
    - question: |*
        Write function <strong>isSorted</strong> that takes in an array of numbers, 
        and returns true if the numbers are sorted from smallest to largest. 
      type: code
      tests:
        - "isSorted([1, 2, 4, 6]) == true"
        - "isSorted([1, 4, 2]) == false"
        - "isSorted([1, 10, 100, 1000]) == true"
      answer: |*
        <code lang='js'>
        function isSorted(array) {
          for (let i = 1; i <= array.length; i++) {
            if (array[i] < array[i-1]) {
              return false;
            }
          }
          return true;
        }
        </code>
    - question: |*
        Mary gets paid 10 dollars an hour normally, and 15 dollars an hour for overtime work. 
        Overtime is any hour worked on the weekends, or any after the usual 8 hours of a workday. <br>
        Write function <strong>calculateWage</strong> that takes in an 7 element array of hours worked for the week, from Sunday to Saturday,
        and returns her total wage for the week. 
      type: code
      tests:
        - "calculateWage([0, 5, 5, 10, 10, 5, 0]) == 370"
        - "calculateWage([8, 0, 0, 8, 5, 8, 3]) == 360"
        - "calculateWage([10, 0, 0, 2, 2, 9, 12]) == 425"
      answer: |*
        <code lang='js'>
        function calculateWage(hours_per_day) {
          let wage = 0;
          for (let day = 0; day < 7; day++) {
            let hours = hours_per_day[day];
            if (day == 0 || day == 7) {
              wage += hours * 15;
            } else if (hours <= 8) {
              wage += hours * 10;
            } else {
              wage += 10 * 8 + 15 * (hours - 8);
            }
          }
          return wage;
        }
        </code>
    - question: |*
        Write function <strong>secondLargest</strong> that takes in an array of positive numbers, 
        and returns the second largest number in the array. 
      type: code
      tests:
        - "secondLargest([1, 2, 7, 3, 8, 5]) == 7"
        - "secondLargest([3, 2, 1]) == 2"
        - "secondLargest([6, 4, 2, 3, 5, 7]) == 6"
      answer: |*
        <code lang='js'>
        function secondLargest(array) {
          let first = 0;
          let second = 0;
          for (let num of array) {
            if (num > first) {
              second = first;
              first = num;
            } else if (num > second) {
              second = num;
            }
          }
          return second;
        }
        </code>
    - question: |*
        A Caesar encryption encrypts a string by changing the alphabet position of every letter by the same amount. 
        This is called its rotation. <br>
        For example, to encrypt the string 'cat' with a rotation of 2, we would increase 'c' by 2 to become 'e', 'a' by 2 to become 'c', 
        and 't' by 2 to become 'v'. In this encryption, 'cat' becomes 'ecv'. <br>
        If any letter goes past the end of the alphabet, it starts from the beginning. When 'by' is encrypted with a rotation of 4, 
        'b' becomes 'f', and 'y' becomes 'c'. In this encryption, 'by' becomes 'fc'. <br>
        Write function <strong>encrypt</strong> that takes in a string and a rotation and returns the encrypted string. 
      type: code
      tests:
        - "encrypt('code', 3) == 'frgh'"
        - "encrypt('ace', 9) == 'jln'"
        - "encrypt('wax', 4) == 'aeb'"
      answer: |*
        <code lang='js'>
        function encrypt(word, rotation) {
          let alphabet = 'abcdefghijklmnopqrstuvwxyz';
          let output = '';
          for (let letter of word) {
            let index = alphabet.indexOf(letter);
            let new_index = (index + rotation) % 26;
            output += alphabet[new_index];
          }
          return output;
        }
        </code>
    - question: |*
        Write function <strong>zeros</strong> that takes in a width and height, 
        and returns a 2D array filled with zeros with the given width and height. 
      type: code
      tests:
        - |
          zeros(4, 3) == [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
          ]
        - |
          zeros(2, 2) == [
            [0, 0],
            [0, 0],
          ]
        - |
          zeros(3, 1) == [
            [0, 0, 0],
          ]
      answer: |*
        <code lang='js'>
        function zeros(width, height) {
          let output = [];
          for (let row = 0; row < height; row++) {
            let current_row = [];
            for (let col = 0; col < width; col++) {
              current_row.push(0);
            }
            output.push(current_row);
          }
          return output;
        }
        </code>
    - question: |*
        Write function <strong>mode</strong> that finds the most common number in an array. 
      type: code
      tests:
        - "mode([2, 3, 3, 6, 7, 6, 6]) == 6"
        - "mode([1, 5, 1, 1, 5]) == 1"
        - "mode([0, 2, 0, 2, 2, 3]) == 2"
      answer: |*
        <code lang='js'>
        function mode(array) {
          let count = {};
          for (let num of array) {
            if (num in count) {
              count[num]++;
            } else {
              count[num] = 1;
            }
          }
          let mode_num = 0;
          let mode_count = 0;
          for (let num in count) {
            if (count[num] > mode_count) {
              mode_count = count[num];
              mode_num = num;
            }
          }
          return mode_num;
        }
        </code>
    - question: |*
        Given a historical sequence of weather and today's weather, predict tomorrow's weather.
        Do this by seeing what type of weather usually follows the weather of today. For example,
        'Today is rainy. Most of the time, after a rainy day there is a sunny day. So tomorrow will be sunny.' <br>
        's' represents sunny, 'r' represents rainy, 'c' represents cloudy, 'f' represents foggy. <br>
        Write function <strong>forecast</strong> that takes a string that represents history, and todays weather, 
        and predicts tomorrow's weather. 
      type: code
      tests:
        - "forecast('rfssrssrf', 'r') == 'f'"
        - "forecast('sssrrsssf', 's') == 's'"
        - "forecast('cscrcrccf', 'c') == 'r'"
      answer: |*
        <code lang='js'>
        function mode(array) {
          let count = {};
          for (let num of array) {
            if (num in count) {
              count[num]++;
            } else {
              count[num] = 1;
            }
          }
          let mode_num = 0;
          let mode_count = 0;
          for (let num in count) {
            if (count[num] > mode_count) {
              mode_count = count[num];
              mode_num = num;
            }
          }
          return mode_num;
        }
        function forecast(history, today) {
          let next_days = [];
          for (let i = 0; i < history.length - 1; i++) {
            if (history[i] == today) {
              let next_day = history[i + 1];
              next_days.push(next_day);
            }
          }
          return mode(next_days);
        }
        </code>
    - question: |*
        In the game 'Big-Tac-Toe', there is a 2D grid of any size where 2 players take turns placing their tiles, 'X' and 'O'. <br>
        A player wins if they have 3 tiles in a row horizontally or vertically (no diagonals). <br>  
        Write function <strong>findWinner</strong> that takes in a 2D array respesenting a grid, 
        and returns the winner.
      type: code
      tests:
        - |
          findWinner([
            [' ', ' ', ' ', ' '],
            [' ', 'X', 'X', ' '],
            [' ', 'X', 'O', 'X'],
            [' ', 'O', 'O', 'O'],
          ]) == 'O'
        - |
          findWinner([
            [' ', ' ', 'O', 'X', 'O'],
            [' ', ' ', 'X', 'X', 'O'],
            [' ', 'X', ' ', ' ', 'O'],
          ]) == 'O'
        - |
          findWinner([
            ['X', 'O', 'O'],
            ['X', 'O', 'X'],
            ['X', 'X', 'O'],
          ]) == 'O'
      answer: |*
        <code lang='js'>
        function findWinner(board) {
          let board_height = board.length;
          let board_width = board[0].length;
          for (let row = 0; row < board_height; row++) {
            for (let col = 0; col < board_width; col++) {
              let piece = board[row][col];
              if (piece != ' ') {
                if (board[row][col + 1] == piece && board[row][col + 2] == piece) {
                  return piece;
                }
                if (board[row + 1][col] == piece && board[row + 2][col] == piece) {
                  return piece;
                }
              }
            }
          }
        }
        </code>
